import React, { useEffect, useState } from "react";
import axios from "axios";
import {
  Calendar as CalendarIcon,
  Clock,
  Plus,
  Edit,
  Trash2,
  Play,
  X,
  Save,
  Sparkles,
  Wand2,
} from "lucide-react";
import { useAuth } from "../contexts/AuthContext";
import api from "../api";

import data from "../../../../AI/DheerajTSEC/Schedule/final.json";

const scheduledPosts = [
  {
    id: 1,
    platform: "LinkedIn",
    content:
      "ðŸš€ Excited to share our Q1 results! Revenue grew 150% compared to last quarter...",
    scheduledFor: new Date("2025-01-15T09:00:00"),
    status: "scheduled",
    autoGenerated: false,
  },
  {
    id: 2,
    platform: "Twitter",
    content:
      "Building in public update: Just hit 5,000 users! Here's what we learned...",
    scheduledFor: new Date("2025-01-16T14:30:00"),
    status: "scheduled",
    autoGenerated: true,
  },
  {
    id: 3,
    platform: "LinkedIn",
    content:
      "The biggest mistake I see startup founders make when raising their first round...",
    scheduledFor: new Date("2025-01-18T10:15:00"),
    status: "scheduled",
    autoGenerated: true,
  },
  {
    id: 4,
    platform: "Twitter",
    content:
      "ðŸ§µ 5 productivity hacks that actually work (not the usual advice):\n\n1/ Time-boxing...",
    scheduledFor: new Date("2025-01-20T16:00:00"),
    status: "draft",
    autoGenerated: true,
  },
];

const recurringSchedules = [
  {
    id: 1,
    name: "Weekly Insights",
    platform: "LinkedIn",
    frequency: "Every Monday at 9:00 AM",
    contentType: "Thought Leadership",
    lastGenerated: new Date("2025-01-13T09:00:00"),
    nextGeneration: new Date("2025-01-20T09:00:00"),
    active: true,
  },
  {
    id: 2,
    name: "Product Updates",
    platform: "Twitter",
    frequency: "Every Friday at 2:00 PM",
    contentType: "Company Updates",
    lastGenerated: new Date("2025-01-10T14:00:00"),
    nextGeneration: new Date("2025-01-17T14:00:00"),
    active: true,
  },
  {
    id: 3,
    name: "Industry Commentary",
    platform: "LinkedIn",
    frequency: "Bi-weekly Wednesday at 11:00 AM",
    contentType: "Thought Leadership",
    lastGenerated: new Date("2025-01-08T11:00:00"),
    nextGeneration: new Date("2025-01-22T11:00:00"),
    active: false,
  },
];

export default function Schedule() {
  // Add state for editing drafts
  const [editingDraft, setEditingDraft] = useState<any>(null);
  const [editDraftContent, setEditDraftContent] = useState("");
  const { user } = useAuth();
  const [activeTab, setActiveTab] = useState<
    "scheduled" | "recurring" | "drafts"
  >("scheduled");
  const [drafts, setDrafts] = useState<any[]>([]);
  const [showNewSchedule, setShowNewSchedule] = useState(false);
  const [showNewRecurring, setShowNewRecurring] = useState(false);
  const [posts, setPosts] = useState<any[]>([]);
  const [recurring, setRecurring] = useState<any[]>([]);
  const [editingPost, setEditingPost] = useState<any>(null);
  const [generatingContent, setGeneratingContent] = useState(false);
  const [loading, setLoading] = useState(true);
  const [newScheduleForm, setNewScheduleForm] = useState({
    platform: "LinkedIn",
    content: "",
    scheduledFor: "",
    contentType: "manual",
  });
  const [schedulePostData, setSchedulePostData] = useState<{
    linkedin_post: string;
    twitter_post: string;
    topic: string;
    identified_style: any;
    engagement_predictions?: {
      linkedin?: {
        lightgbm_prediction?: {
          predicted_likes: number;
          predicted_comments: number;
          predicted_impressions: number;
        };
        xgboost_prediction?: {
          predicted_likes: number;
          predicted_comments: number;
          predicted_impressions: number;
        };
      };
      twitter?: {
        lightgbm_prediction?: {
          predicted_likes: number;
          predicted_comments: number;
          predicted_impressions: number;
        };
        xgboost_prediction?: {
          predicted_likes: number;
          predicted_comments: number;
          predicted_impressions: number;
        };
      };
    };
  } | null>(null);

  const [loadingPredictions, setLoadingPredictions] = useState(false);
  const [schedulingPost, setSchedulingPost] = useState(false);
  const [scheduleSuccess, setScheduleSuccess] = useState(false);
  const [newRecurringForm, setNewRecurringForm] = useState({
    name: "",
    platform: "LinkedIn",
    frequency: "weekly",
    dayOfWeek: "monday",
    time: "09:00",
    contentType: "Thought Leadership",
    active: true,
  });

  const formatDate = (date: Date | string) => {
    const dateObj = typeof date === "string" ? new Date(date) : date;

    // Check if the date is valid
    if (!dateObj || isNaN(dateObj.getTime())) {
      return "Invalid Date";
    }

    return dateObj.toLocaleDateString("en-US", {
      weekday: "short",
      year: "numeric",
      month: "short",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case "scheduled":
        return "bg-purple-100 text-purple-800";
      case "draft":
        return "bg-yellow-100 text-yellow-800";
      case "published":
        return "bg-green-100 text-green-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  // Function to fetch engagement predictions
  const fetchEngagementPredictions = async (postData: any) => {
    setLoadingPredictions(true);
    try {
      // Create a timestamp for today + 1 month (similar to the example)
      const futureDate = new Date();
      futureDate.setMonth(futureDate.getMonth() + 1);
      const timestamp = futureDate.toISOString();

      // Fetch LinkedIn prediction
      const linkedinResponse = await fetch(
        "http://127.0.0.1:5001/predict_engagement",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            text: postData.linkedin_post,
            platform: "LinkedIn",
            timestamp: timestamp,
          }),
        }
      );

      // Fetch Twitter prediction
      const twitterResponse = await fetch(
        "http://127.0.0.1:5001/predict_engagement",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            text: postData.twitter_post,
            platform: "Twitter",
            timestamp: timestamp,
          }),
        }
      );

      if (linkedinResponse.ok && twitterResponse.ok) {
        const linkedinData = await linkedinResponse.json();
        const twitterData = await twitterResponse.json();

        return {
          linkedin: linkedinData,
          twitter: twitterData,
        };
      } else {
        console.error(
          "Error fetching predictions:",
          linkedinResponse.ok ? "" : await linkedinResponse.text(),
          twitterResponse.ok ? "" : await twitterResponse.text()
        );
        return null;
      }
    } catch (error) {
      console.error("Error fetching engagement predictions:", error);
      return null;
    } finally {
      setLoadingPredictions(false);
    }
  };

  // Function to load drafts from final.json
  const loadDrafts = async () => {
    try {
      // Try multiple paths to find the final.json file
      const paths = [
        "/AI/DheerajTSEC/Schedule/final.json",
        "/final.json",
        "../AI/DheerajTSEC/Schedule/final.json",
        "../../AI/DheerajTSEC/Schedule/final.json",
        "/api/drafts", // In case we need to set up a proxy endpoint
      ];

      let loaded = false;
      const sampleData = data;
      for (const path of paths) {
        if (loaded) break;
        try {
          const response = await axios.get(path);
          // Try to parse and validate the drafts array
          let draftsArr = null;
          if (Array.isArray(response.data)) {
            draftsArr = response.data;
          } else if (response.data && Array.isArray(response.data.drafts)) {
            draftsArr = response.data.drafts;
          }
          if (draftsArr) {
            // Filter out any invalid objects (e.g. if file is partially corrupted)
            const validDrafts = draftsArr.filter(
              (d) => typeof d === "object" && d.generated_draft
            );
            if (validDrafts.length > 0) {
              setDrafts(validDrafts);
            } else {
              setDrafts(sampleData);
            }
            loaded = true;
            break;
          }
        } catch (pathError) {
          let errorMsg = "";
          if (
            typeof pathError === "object" &&
            pathError !== null &&
            "message" in pathError
          ) {
            errorMsg = (pathError as any).message;
          } else {
            errorMsg = String(pathError);
          }
          // If error is a JSON parse error, ignore and continue
          if (
            errorMsg.includes("Unexpected token") ||
            errorMsg.includes("parse")
          ) {
            console.warn(`JSON parse error in ${path}:`, errorMsg);
          } else {
            console.log(`Failed to load from ${path}:`, errorMsg);
          }
          // Continue to next path
        }
      }
      if (!loaded) {
        setDrafts(sampleData);
      }
    } catch (error) {
      console.error("Error in loadDrafts function:", error);
      setDrafts([]); // Ensure drafts is always an array on error
    } finally {
      setLoading(false);
    }
  };

  // Load data on component mount
  useEffect(() => {
    // Load scheduled posts from localStorage if available
    const localPosts = localStorage.getItem("scheduledPosts");
    if (localPosts) {
      try {
        const parsedPosts = JSON.parse(localPosts);
        if (Array.isArray(parsedPosts)) {
          setPosts(
            parsedPosts.map((post) => ({
              ...post,
              scheduledFor: new Date(post.scheduledFor),
            }))
          );
        }
      } catch (e) {
        console.error("Error parsing scheduledPosts from localStorage:", e);
      }
    } else {
      loadScheduledPosts();
    }
    loadRecurringSchedules();
    loadDrafts();

    // Check if there's data from ContentChat to pre-populate the schedule modal
    const storedScheduleData = sessionStorage.getItem("schedulePostData");
    if (storedScheduleData) {
      try {
        const data = JSON.parse(storedScheduleData);
        setSchedulePostData(data);
        setNewScheduleForm({
          platform: "LinkedIn",
          content: data.linkedin_post || "",
          scheduledFor: "",
          contentType: "manual",
        });
        setShowNewSchedule(true);

        // Fetch engagement predictions
        fetchEngagementPredictions(data).then((predictions) => {
          if (predictions) {
            setSchedulePostData((prevData) => ({
              ...prevData!,
              engagement_predictions: predictions,
            }));
          }
        });

        // Clear the data from sessionStorage
        sessionStorage.removeItem("schedulePostData");
      } catch (error) {
        console.error("Error parsing schedule post data:", error);
        sessionStorage.removeItem("schedulePostData");
      }
    }
  }, []);

  const loadScheduledPosts = async () => {
    try {
      const response = await api.get("/schedule/posts");
      if (response.data.success) {
        setPosts(response.data.posts);
      }
    } catch (error) {
      console.error("Failed to load scheduled posts:", error);
    } finally {
      setLoading(false);
    }
  };

  const loadRecurringSchedules = async () => {
    try {
      const response = await api.get("/schedule/recurring");
      if (response.data.success) {
        setRecurring(response.data.schedules);
      }
    } catch (error) {
      console.error("Failed to load recurring schedules:", error);
    }
  };

  const handleDeletePost = async (postId: string) => {
    try {
      await api.delete(`/schedule/posts/${postId}`);
      setPosts(posts.filter((post) => (post._id || post.id) !== postId));
    } catch (error) {
      console.error("Failed to delete post:", error);
    }
  };

  const handleEditPost = (post: any) => {
    setEditingPost({ ...post });
  };

  const handlePublishNow = async (postId: string) => {
    const post = posts.find((p) => (p._id || p.id) === postId);
    if (post) {
      try {
        await api.put(`/schedule/posts/${postId}`, {
          status: "published",
          scheduledFor: new Date(),
        });
        setPosts(
          posts.map((p) =>
            (p._id || p.id) === postId
              ? { ...p, status: "published", scheduledFor: new Date() }
              : p
          )
        );
      } catch (error) {
        console.error("Failed to publish post:", error);
      }
    }
  };

  const handleSaveEdit = async () => {
    if (editingPost) {
      try {
        const postId = editingPost._id || editingPost.id;
        await api.put(`/schedule/posts/${postId}`, editingPost);
        const updatedPosts = posts.map((p) =>
          (p._id || p.id) === postId ? editingPost : p
        );
        setPosts(updatedPosts);
        localStorage.setItem("scheduledPosts", JSON.stringify(updatedPosts));
        setEditingPost(null);
      } catch (error) {
        console.error("Failed to save edit:", error);
      }
    }
  };

  // Helper function to format date for the API
  const formatDateForAPI = (dateString: string) => {
    const date = new Date(dateString);
    return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(
      2,
      "0"
    )}-${String(date.getDate()).padStart(2, "0")} ${String(
      date.getHours()
    ).padStart(2, "0")}:${String(date.getMinutes()).padStart(2, "0")}:00`;
  };

  const handleCreateSchedule = async () => {
    setSchedulingPost(true);
    try {
      // If we have AI generated content from schedulePostData
      if (schedulePostData && newScheduleForm.scheduledFor) {
        // Determine which platform content to use based on the selected platform
        const content =
          newScheduleForm.platform === "LinkedIn"
            ? schedulePostData.linkedin_post
            : schedulePostData.twitter_post;

        // Format the date for the API
        const formattedDate = formatDateForAPI(newScheduleForm.scheduledFor);

        // Prepare the payload for the schedule_post API using the exact format required
        const payload = {
          identified_style: {
            niche: schedulePostData.identified_style?.niche || "Technology",
            tone: schedulePostData.identified_style?.tone || "Professional",
            writing_style:
              schedulePostData.identified_style?.writing_style || "Informative",
          },
          scheduled_time: formattedDate,
          prompt_idea: schedulePostData.topic,
        };

        // Call the schedule_post API directly
        const response = await fetch("http://127.0.0.1:5003/schedule_post", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(payload),
        });

        if (response.ok) {
          const result = await response.json();
          console.log("Post scheduled successfully:", result);

          // Create a post object to add to the state
          const newPost = {
            id: Date.now(), // Temporary ID
            platform: newScheduleForm.platform,
            content: content,
            scheduledFor: new Date(newScheduleForm.scheduledFor),
            status: "scheduled",
            autoGenerated: true,
          };

          // Add the new post to the posts state and persist to localStorage
          const updatedPosts = [...posts, newPost];
          setPosts(updatedPosts);
          localStorage.setItem("scheduledPosts", JSON.stringify(updatedPosts));

          // Show success message
          setScheduleSuccess(true);

          // Hide success message after 3 seconds
          setTimeout(() => {
            setScheduleSuccess(false);
          }, 3000);

          // Reset the form and close the modal
          setShowNewSchedule(false);
          setSchedulePostData(null);
          setNewScheduleForm({
            platform: "LinkedIn",
            content: "",
            scheduledFor: "",
            contentType: "manual",
          });
        }
      } else {
        // Regular post scheduling (no AI content)
        // Format the date for the API
        const formattedDate = formatDateForAPI(newScheduleForm.scheduledFor);

        // For regular posts, we'll create a simple prompt idea based on the content
        const promptIdea =
          newScheduleForm.content.substring(0, 50) +
          (newScheduleForm.content.length > 50 ? "..." : "");

        // Prepare the payload for the schedule_post API using the exact format required
        const payload = {
          identified_style: {
            niche: "Technology", // Default niche for manual posts
            tone: "Professional", // Default tone for manual posts
            writing_style: "Informative", // Default writing style for manual posts
          },
          scheduled_time: formattedDate,
          prompt_idea: promptIdea,
        };

        // Call the schedule_post API directly
        const response = await fetch("http://127.0.0.1:5003/schedule_post", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(payload),
        });

        if (response.ok) {
          const result = await response.json();
          console.log("Post scheduled successfully:", result);

          // Create a post object to add to the state
          const newPost = {
            id: Date.now(), // Temporary ID
            platform: newScheduleForm.platform,
            content: newScheduleForm.content,
            scheduledFor: new Date(newScheduleForm.scheduledFor),
            status: "scheduled",
            autoGenerated: false,
            contentType:
              newScheduleForm.contentType === "manual"
                ? "Personal"
                : newScheduleForm.contentType,
          };

          const updatedPosts = [...posts, newPost];
          setPosts(updatedPosts);
          localStorage.setItem("scheduledPosts", JSON.stringify(updatedPosts));

          // Show success message
          setScheduleSuccess(true);

          // Hide success message after 3 seconds
          setTimeout(() => {
            setScheduleSuccess(false);
          }, 3000);

          setShowNewSchedule(false);
          setNewScheduleForm({
            platform: "LinkedIn",
            content: "",
            scheduledFor: "",
            contentType: "manual",
          });
        }
      }
    } catch (error) {
      console.error("Failed to create scheduled post:", error);
      // You could add a toast notification here
    } finally {
      setSchedulingPost(false);
    }
  };

  const handleCreateRecurring = async () => {
    try {
      const dayOfWeekMap: { [key: string]: number } = {
        sunday: 0,
        monday: 1,
        tuesday: 2,
        wednesday: 3,
        thursday: 4,
        friday: 5,
        saturday: 6,
      };

      const response = await api.post("/schedule/recurring", {
        name: newRecurringForm.name,
        platform: newRecurringForm.platform,
        contentType: newRecurringForm.contentType,
        frequency: newRecurringForm.frequency,
        timeOfDay: newRecurringForm.time,
        dayOfWeek: dayOfWeekMap[newRecurringForm.dayOfWeek],
        contentPrompts: [
          `Create a ${newRecurringForm.contentType.toLowerCase()} post for ${
            newRecurringForm.platform
          }`,
        ],
        settings: {
          tone: user?.tone || "professional",
          includeHashtags: true,
          contentLength: "medium",
        },
      });

      if (response.data.success) {
        setRecurring([...recurring, response.data.schedule]);
        setShowNewRecurring(false);
        setNewRecurringForm({
          name: "",
          platform: "LinkedIn",
          frequency: "weekly",
          dayOfWeek: "monday",
          time: "09:00",
          contentType: "Thought Leadership",
          active: true,
        });
      }
    } catch (error) {
      console.error("Failed to create recurring schedule:", error);
    }
  };

  const toggleRecurringStatus = (scheduleId: string) => {
    setRecurring(
      recurring.map((schedule) =>
        (schedule._id || schedule.id) === scheduleId
          ? { ...schedule, active: !schedule.active }
          : schedule
      )
    );
  };

  const generateScheduledContent = async (scheduleId: string) => {
    const schedule = recurring.find((s) => s._id === scheduleId);
    if (!schedule || !user) return;

    setGeneratingContent(true);
    try {
      const response = await api.post(
        `/schedule/recurring/${scheduleId}/generate`
      );

      if (response.data.success) {
        setPosts([...posts, response.data.post]);

        // Update the recurring schedule's next generation time
        setRecurring(
          recurring.map((s) =>
            s._id === scheduleId
              ? {
                  ...s,
                  lastGenerated: new Date(),
                  nextGeneration: new Date(response.data.nextGeneration),
                }
              : s
          )
        );
      }
    } catch (error) {
      console.error("Failed to generate scheduled content:", error);
    } finally {
      setGeneratingContent(false);
    }
  };
  return (
    <div className="flex min-h-screen bg-gray-50 relative">
      {/* Success Notification */}
      {scheduleSuccess && (
        <div className="fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 flex items-center transition-opacity duration-300 ease-in-out">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-5 w-5 mr-2"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fillRule="evenodd"
              d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
              clipRule="evenodd"
            />
          </svg>
          Post scheduled successfully!
        </div>
      )}

      <main className="flex-1 overflow-auto">
        {/* ...existing code... */}
        <div className="p-8">
          {/* Header */}
          <div className="flex items-center justify-between mb-8">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">
                Content Schedule
              </h1>
              <p className="text-gray-600">
                Manage your scheduled posts and automated content generation
              </p>
            </div>
            <button
              onClick={() => setShowNewSchedule(true)}
              className="flex items-center px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-colors"
            >
              <Plus className="w-4 h-4 mr-2" />
              New Schedule
            </button>
          </div>
          {/* Tabs */}
          <div className="flex space-x-1 bg-gray-100 rounded-lg p-1 mb-8 w-fit">
            <button
              onClick={() => setActiveTab("scheduled")}
              className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                activeTab === "scheduled"
                  ? "bg-white text-gray-900 shadow-sm"
                  : "text-gray-600 hover:text-gray-900"
              }`}
            >
              Scheduled Posts
            </button>
            <button
              className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                activeTab === "recurring"
                  ? "bg-white text-gray-900 shadow-sm"
                  : "text-gray-600 hover:text-gray-900"
              }`}
            ></button>
            <button
              onClick={() => setActiveTab("drafts")}
              className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                activeTab === "drafts"
                  ? "bg-white text-gray-900 shadow-sm"
                  : "text-gray-600 hover:text-gray-900"
              }`}
            >
              Content Drafts
            </button>
          </div>
          {/* Scheduled Posts Tab */}
          {activeTab === "scheduled" && (
            <div className="space-y-4">
              {loading ? (
                <div className="flex items-center justify-center py-12">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-500"></div>
                  <span className="ml-2 text-gray-600">
                    Loading scheduled posts...
                  </span>
                </div>
              ) : posts.length === 0 ? (
                <div className="text-center py-12">
                  <CalendarIcon className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    No scheduled posts
                  </h3>
                  <p className="text-gray-600 mb-4">
                    Create your first scheduled post to get started.
                  </p>
                  <button
                    onClick={() => setShowNewSchedule(true)}
                    className="bg-purple-500 text-white px-4 py-2 rounded-lg hover:bg-purple-600"
                  >
                    Schedule Your First Post
                  </button>
                </div>
              ) : (
                posts.map((post) => (
                  <div
                    key={post._id || post.id}
                    className="bg-white rounded-xl shadow-sm border border-gray-200 p-6"
                  >
                    {editingPost &&
                    (editingPost._id || editingPost.id) ===
                      (post._id || post.id) ? (
                      <div className="space-y-4">
                        <div className="flex items-center justify-between">
                          <h3 className="text-lg font-semibold text-gray-900">
                            Edit Post
                          </h3>
                          <button
                            onClick={() => setEditingPost(null)}
                            className="p-2 text-gray-400 hover:text-gray-600"
                          >
                            <X className="w-4 h-4" />
                          </button>
                        </div>
                        <textarea
                          value={editingPost.content}
                          onChange={(e) =>
                            setEditingPost({
                              ...editingPost,
                              content: e.target.value,
                            })
                          }
                          rows={6}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                        />
                        <input
                          type="datetime-local"
                          value={editingPost.scheduledFor
                            .toISOString()
                            .slice(0, 16)}
                          onChange={(e) =>
                            setEditingPost({
                              ...editingPost,
                              scheduledFor: new Date(e.target.value),
                            })
                          }
                          className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                        />
                        <div className="flex space-x-2">
                          <button
                            onClick={handleSaveEdit}
                            className="flex items-center px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600"
                          >
                            <Save className="w-4 h-4 mr-2" />
                            Save Changes
                          </button>
                          <button
                            onClick={() => setEditingPost(null)}
                            className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
                          >
                            Cancel
                          </button>
                        </div>
                      </div>
                    ) : (
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <div className="flex items-center space-x-3 mb-3">
                            <span
                              className={`px-2 py-1 text-xs font-medium rounded-full ${
                                post.platform === "LinkedIn"
                                  ? "bg-blue-100 text-blue-800"
                                  : "bg-gray-100 text-gray-800"
                              }`}
                            >
                              {post.platform}
                            </span>
                            <span
                              className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(
                                post.status
                              )}`}
                            >
                              {post.status}
                            </span>
                            {post.autoGenerated && (
                              <span className="px-2 py-1 text-xs font-medium rounded-full bg-teal-100 text-teal-800">
                                AI Generated
                              </span>
                            )}
                          </div>

                          <p className="text-gray-900 mb-4 line-clamp-2">
                            {post.content}
                          </p>

                          <div className="flex items-center text-sm text-gray-600">
                            <CalendarIcon className="w-4 h-4 mr-1" />
                            Scheduled for {formatDate(post.scheduledFor)}
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                ))
              )}
            </div>
          )}
          {/* Recurring Schedules Tab */}
          {activeTab === "recurring" && (
            <div className="space-y-4">
              {loading ? (
                <div className="flex items-center justify-center py-12">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-500"></div>
                  <span className="ml-2 text-gray-600">
                    Loading recurring schedules...
                  </span>
                </div>
              ) : recurring.length === 0 ? (
                <div className="text-center py-12">
                  <Clock className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    No recurring schedules
                  </h3>
                  <p className="text-gray-600 mb-4">
                    Set up automated content generation to save time.
                  </p>
                  <button
                    onClick={() => setShowNewRecurring(true)}
                    className="bg-purple-500 text-white px-4 py-2 rounded-lg hover:bg-purple-600"
                  >
                    Create Your First Schedule
                  </button>
                </div>
              ) : (
                recurring.map((schedule) => (
                  <div
                    key={schedule._id || schedule.id}
                    className="bg-white rounded-xl shadow-sm border border-gray-200 p-6"
                  >
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center space-x-3 mb-3">
                          <h3 className="text-lg font-semibold text-gray-900">
                            {schedule.name}
                          </h3>
                          <span
                            className={`px-2 py-1 text-xs font-medium rounded-full ${
                              schedule.active
                                ? "bg-green-100 text-green-800"
                                : "bg-gray-100 text-gray-800"
                            }`}
                          >
                            {schedule.active ? "Active" : "Paused"}
                          </span>
                        </div>

                        <div className="grid grid-cols-2 gap-4 mb-4">
                          <div>
                            <p className="text-sm font-medium text-gray-700">
                              Platform
                            </p>
                            <p className="text-sm text-gray-600">
                              {schedule.platform}
                            </p>
                          </div>
                          <div>
                            <p className="text-sm font-medium text-gray-700">
                              Content Type
                            </p>
                            <p className="text-sm text-gray-600">
                              {schedule.contentType}
                            </p>
                          </div>
                          <div>
                            <p className="text-sm font-medium text-gray-700">
                              Frequency
                            </p>
                            <p className="text-sm text-gray-600">
                              {schedule.frequency}
                            </p>
                          </div>
                          <div>
                            <p className="text-sm font-medium text-gray-700">
                              Next Generation
                            </p>
                            <p className="text-sm text-gray-600">
                              {formatDate(schedule.nextGeneration)}
                            </p>
                          </div>
                        </div>

                        <div className="flex items-center text-sm text-gray-500">
                          <Clock className="w-4 h-4 mr-1" />
                          Last generated: {formatDate(schedule.lastGenerated)}
                        </div>
                      </div>

                      <div className="flex items-center space-x-2 ml-4">
                        <button
                          onClick={() =>
                            generateScheduledContent(
                              schedule._id || schedule.id
                            )
                          }
                          disabled={generatingContent || !schedule.active}
                          className="flex items-center px-3 py-1 text-sm font-medium bg-purple-100 text-purple-700 hover:bg-purple-200 disabled:opacity-50 disabled:cursor-not-allowed rounded-lg transition-colors"
                          title="Generate content now"
                        >
                          <Wand2 className="w-4 h-4 mr-1" />
                          {generatingContent ? "Generating..." : "Generate Now"}
                        </button>
                        <button className="p-2 text-gray-400 hover:text-purple-600 hover:bg-purple-50 rounded-lg transition-colors">
                          <Edit className="w-4 h-4" />
                        </button>
                        <button
                          onClick={() =>
                            toggleRecurringStatus(schedule._id || schedule.id)
                          }
                          className={`px-3 py-1 text-sm font-medium rounded-lg transition-colors ${
                            schedule.active
                              ? "bg-red-100 text-red-700 hover:bg-red-200"
                              : "bg-green-100 text-green-700 hover:bg-green-200"
                          }`}
                        >
                          {schedule.active ? "Pause" : "Activate"}
                        </button>
                      </div>
                    </div>
                  </div>
                ))
              )}
            </div>
          )}

          {/* Content Drafts Tab */}
          {activeTab === "drafts" && (
            <div className="space-y-4">
              {loading ? (
                <div className="flex items-center justify-center py-12">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-500"></div>
                  <span className="ml-2 text-gray-600">
                    Loading content drafts...
                  </span>
                </div>
              ) : drafts.length === 0 ? (
                <div className="text-center py-12">
                  <Sparkles className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    No content drafts
                  </h3>
                  <p className="text-gray-600 mb-4">
                    Generate content with AI to see drafts here.
                  </p>
                </div>
              ) : (
                drafts.map((draft, index) => (
                  <div
                    key={index}
                    className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 relative"
                  >
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center space-x-3 mb-3">
                          <h3 className="text-lg font-semibold text-gray-900">
                            {draft.original_prompt_idea || "AI Generated Draft"}
                          </h3>
                          <span className="px-2 py-1 text-xs font-medium rounded-full bg-purple-100 text-purple-800">
                            Draft
                          </span>
                        </div>

                        <div className="grid grid-cols-3 gap-4 mb-4">
                          <div>
                            <p className="text-sm font-medium text-gray-700">
                              Niche
                            </p>
                            <p className="text-sm text-gray-600">
                              {draft.original_style?.niche || "Not specified"}
                            </p>
                          </div>
                          <div>
                            <p className="text-sm font-medium text-gray-700">
                              Tone
                            </p>
                            <p className="text-sm text-gray-600">
                              {draft.original_style?.tone || "Not specified"}
                            </p>
                          </div>
                          <div>
                            <p className="text-sm font-medium text-gray-700">
                              Writing Style
                            </p>
                            <p className="text-sm text-gray-600">
                              {draft.original_style?.writing_style ||
                                "Not specified"}
                            </p>
                          </div>
                        </div>

                        <div className="mb-4">
                          <p className="text-sm font-medium text-gray-700 mb-2">
                            Generated Content
                          </p>
                          <div className="bg-gray-50 p-4 rounded-lg text-sm text-gray-800 whitespace-pre-wrap">
                            {draft.generated_draft}
                          </div>
                        </div>

                        <div className="flex items-center text-sm text-gray-500">
                          <Clock className="w-4 h-4 mr-1" />
                          Generated on:{" "}
                          {new Date(
                            draft.generation_timestamp
                          ).toLocaleString()}
                        </div>
                      </div>
                      <button
                        className="ml-4 px-3 py-1 bg-purple-500 text-white rounded hover:bg-purple-600 transition-colors"
                        onClick={() => {
                          setEditingDraft(draft);
                          setEditDraftContent(draft.generated_draft);
                        }}
                      >
                        Edit
                      </button>
                    </div>
                  </div>
                ))

                // Edit Modal (only show once, outside the map)
              )}
              {editingDraft && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                  <div className="bg-white rounded-lg p-6 w-full max-w-lg shadow-lg">
                    <h2 className="text-xl font-bold mb-4">Edit Draft</h2>
                    <textarea
                      className="w-full h-40 border rounded p-2 mb-4"
                      value={editDraftContent}
                      onChange={(e) => setEditDraftContent(e.target.value)}
                    />
                    <div className="flex justify-end space-x-2">
                      <button
                        className="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300"
                        onClick={() => setEditingDraft(null)}
                      >
                        Cancel
                      </button>
                      <button
                        className="px-4 py-2 bg-purple-500 text-white rounded hover:bg-purple-600"
                        onClick={() => {
                          setDrafts(
                            drafts.map((d) =>
                              d.id === editingDraft.id
                                ? { ...d, generated_draft: editDraftContent }
                                : d
                            )
                          );
                          setEditingDraft(null);
                          // Optionally, persist to backend or localStorage here
                        }}
                      >
                        Save
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </div>
          )}
          {/* Empty State */}
          {((activeTab === "scheduled" && scheduledPosts.length === 0) ||
            (activeTab === "recurring" && recurring.length === 0) ||
            (activeTab === "drafts" && drafts.length === 0)) && (
            <div className="text-center py-12">
              <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <CalendarIcon className="w-8 h-8 text-gray-400" />
              </div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                No{" "}
                {activeTab === "scheduled"
                  ? "scheduled posts"
                  : activeTab === "recurring"
                  ? "recurring schedules"
                  : "content drafts"}{" "}
                yet
              </h3>
              <p className="text-gray-600 mb-4">
                {activeTab === "scheduled"
                  ? "Schedule your first post to get started"
                  : activeTab === "recurring"
                  ? "Set up automated content generation schedules"
                  : "Generate content with AI to see drafts here"}
              </p>
              {activeTab !== "drafts" ? (
                <button
                  onClick={() => setShowNewSchedule(true)}
                  className="flex items-center px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-colors mx-auto"
                >
                  <Plus className="w-4 h-4 mr-2" />
                  {activeTab === "scheduled"
                    ? "Schedule Post"
                    : "Create Schedule"}
                </button>
              ) : null}
            </div>
          )}
          {/* New Schedule Modal */}
          {showNewSchedule && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
              <div className="bg-white rounded-xl shadow-xl p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-lg font-semibold text-gray-900">
                    {schedulePostData
                      ? "Schedule AI Generated Posts"
                      : "Schedule New Post"}
                  </h3>
                  <button
                    onClick={() => {
                      setShowNewSchedule(false);
                      setSchedulePostData(null);
                    }}
                    className="p-2 text-gray-400 hover:text-gray-600"
                  >
                    <X className="w-4 h-4" />
                  </button>
                </div>

                {schedulePostData && (
                  <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                    <h4 className="font-medium text-blue-900 mb-2">
                      Generated Content for: "{schedulePostData.topic}"
                    </h4>
                    {/* <div className="text-sm text-blue-700">
                      <p>
                        <strong>Niche:</strong>{" "}
                        {schedulePostData.identified_style.niche}
                      </p>
                      <p>
                        <strong>Tone:</strong>{" "}
                        {schedulePostData.identified_style.tone}
                      </p>
                      <p>
                        <strong>Style:</strong>{" "}
                        {schedulePostData.identified_style.writing_style}
                      </p>
                    </div> */}
                  </div>
                )}

                <div className="space-y-6">
                  {schedulePostData ? (
                    // Show both LinkedIn and Twitter posts when data is available
                    <>
                      {/* LinkedIn Post */}
                      <div className="border border-gray-200 rounded-lg p-4">
                        <div className="flex items-center justify-between mb-3">
                          <h4 className="font-medium text-gray-900 flex items-center">
                            <span className="w-3 h-3 bg-blue-500 rounded-full mr-2"></span>
                            LinkedIn Post
                          </h4>
                          <button
                            onClick={() => {
                              // Set the current date and time as default
                              const now = new Date();
                              // Add 1 hour to current time
                              now.setHours(now.getHours() + 1);
                              // Format for datetime-local input
                              const formattedDate = now
                                .toISOString()
                                .slice(0, 16);

                              setNewScheduleForm({
                                platform: "LinkedIn",
                                content: schedulePostData.linkedin_post,
                                scheduledFor: formattedDate,
                                contentType: "manual",
                              });
                            }}
                            className="text-sm text-purple-600 hover:text-purple-700 font-medium"
                          >
                            Schedule This
                          </button>
                        </div>
                        <textarea
                          value={schedulePostData.linkedin_post}
                          readOnly
                          rows={4}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-700"
                        />

                        {/* LinkedIn Engagement Predictions */}
                        <div className="mt-3 p-3 bg-gray-50 rounded-lg border border-gray-200">
                          <h5 className="text-sm font-medium text-gray-700 mb-2">
                            Engagement Prediction
                          </h5>
                          {loadingPredictions ? (
                            <div className="flex justify-center items-center py-4">
                              <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
                              <span className="ml-2 text-sm text-gray-600">
                                Calculating engagement...
                              </span>
                            </div>
                          ) : schedulePostData.engagement_predictions?.linkedin
                              ?.xgboost_prediction ? (
                            <div className="grid grid-cols-3 gap-2">
                              <div className="flex flex-col items-center p-2 bg-white rounded border border-gray-200">
                                <span className="text-xs text-gray-500">
                                  Likes
                                </span>
                                <span className="text-lg font-semibold text-blue-600">
                                  {
                                    schedulePostData.engagement_predictions
                                      .linkedin.xgboost_prediction
                                      .predicted_likes
                                  }
                                </span>
                              </div>
                              <div className="flex flex-col items-center p-2 bg-white rounded border border-gray-200">
                                <span className="text-xs text-gray-500">
                                  Comments
                                </span>
                                <span className="text-lg font-semibold text-blue-600">
                                  {
                                    schedulePostData.engagement_predictions
                                      .linkedin.xgboost_prediction
                                      .predicted_comments
                                  }
                                </span>
                              </div>
                              <div className="flex flex-col items-center p-2 bg-white rounded border border-gray-200">
                                <span className="text-xs text-gray-500">
                                  Impressions
                                </span>
                                <span className="text-lg font-semibold text-blue-600">
                                  {
                                    schedulePostData.engagement_predictions
                                      .linkedin.xgboost_prediction
                                      .predicted_impressions
                                  }
                                </span>
                              </div>
                            </div>
                          ) : (
                            <div className="text-center py-2 text-sm text-gray-500">
                              Unable to calculate engagement predictions.
                            </div>
                          )}
                        </div>
                      </div>

                      {/* Twitter Post */}
                      <div className="border border-gray-200 rounded-lg p-4">
                        <div className="flex items-center justify-between mb-3">
                          <h4 className="font-medium text-gray-900 flex items-center">
                            <span className="w-3 h-3 bg-blue-400 rounded-full mr-2"></span>
                            Twitter/X Post
                          </h4>
                          <button
                            onClick={() => {
                              // Set the current date and time as default
                              const now = new Date();
                              // Add 1 hour to current time
                              now.setHours(now.getHours() + 1);
                              // Format for datetime-local input
                              const formattedDate = now
                                .toISOString()
                                .slice(0, 16);

                              setNewScheduleForm({
                                platform: "Twitter",
                                content: schedulePostData.twitter_post,
                                scheduledFor: formattedDate,
                                contentType: "manual",
                              });
                            }}
                            className="text-sm text-purple-600 hover:text-purple-700 font-medium"
                          >
                            Schedule This
                          </button>
                        </div>
                        <textarea
                          value={schedulePostData.twitter_post}
                          readOnly
                          rows={4}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-700"
                        />

                        {/* Twitter Engagement Predictions */}
                        <div className="mt-3 p-3 bg-gray-50 rounded-lg border border-gray-200">
                          <h5 className="text-sm font-medium text-gray-700 mb-2">
                            Engagement Prediction
                          </h5>
                          {loadingPredictions ? (
                            <div className="flex justify-center items-center py-4">
                              <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
                              <span className="ml-2 text-sm text-gray-600">
                                Calculating engagement...
                              </span>
                            </div>
                          ) : schedulePostData.engagement_predictions?.twitter
                              ?.xgboost_prediction ? (
                            <div className="grid grid-cols-3 gap-2">
                              <div className="flex flex-col items-center p-2 bg-white rounded border border-gray-200">
                                <span className="text-xs text-gray-500">
                                  Likes
                                </span>
                                <span className="text-lg font-semibold text-blue-600">
                                  {
                                    schedulePostData.engagement_predictions
                                      .twitter.xgboost_prediction
                                      .predicted_likes
                                  }
                                </span>
                              </div>
                              <div className="flex flex-col items-center p-2 bg-white rounded border border-gray-200">
                                <span className="text-xs text-gray-500">
                                  Comments
                                </span>
                                <span className="text-lg font-semibold text-blue-600">
                                  {
                                    schedulePostData.engagement_predictions
                                      .twitter.xgboost_prediction
                                      .predicted_comments
                                  }
                                </span>
                              </div>
                              <div className="flex flex-col items-center p-2 bg-white rounded border border-gray-200">
                                <span className="text-xs text-gray-500">
                                  Impressions
                                </span>
                                <span className="text-lg font-semibold text-blue-600">
                                  {
                                    schedulePostData.engagement_predictions
                                      .twitter.xgboost_prediction
                                      .predicted_impressions
                                  }
                                </span>
                              </div>
                            </div>
                          ) : (
                            <div className="text-center py-2 text-sm text-gray-500">
                              Unable to calculate engagement predictions.
                            </div>
                          )}
                        </div>
                      </div>
                    </>
                  ) : (
                    // Original form for manual input
                    <>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Platform
                        </label>
                        <select
                          value={newScheduleForm.platform}
                          onChange={(e) =>
                            setNewScheduleForm({
                              ...newScheduleForm,
                              platform: e.target.value,
                            })
                          }
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                        >
                          <option value="LinkedIn">LinkedIn</option>
                          <option value="Twitter">Twitter/X</option>
                        </select>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Content Type
                        </label>
                        <select
                          value={newScheduleForm.contentType}
                          onChange={(e) =>
                            setNewScheduleForm({
                              ...newScheduleForm,
                              contentType: e.target.value,
                            })
                          }
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                        >
                          <option value="manual">Write manually</option>
                          <option value="ai">Generate with AI</option>
                        </select>
                      </div>
                      {newScheduleForm.contentType === "manual" && (
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            Content
                          </label>
                          <textarea
                            value={newScheduleForm.content}
                            onChange={(e) =>
                              setNewScheduleForm({
                                ...newScheduleForm,
                                content: e.target.value,
                              })
                            }
                            rows={4}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                            placeholder="Write your post content..."
                          />
                        </div>
                      )}
                    </>
                  )}

                  {/* Schedule Date/Time - Always show */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Schedule For
                    </label>
                    <input
                      type="datetime-local"
                      value={newScheduleForm.scheduledFor}
                      onChange={(e) =>
                        setNewScheduleForm({
                          ...newScheduleForm,
                          scheduledFor: e.target.value,
                        })
                      }
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    />
                  </div>
                </div>

                <div className="flex space-x-3 mt-6">
                  <button
                    onClick={handleCreateSchedule}
                    disabled={
                      schedulingPost ||
                      !newScheduleForm.scheduledFor ||
                      (newScheduleForm.contentType === "manual" &&
                        !newScheduleForm.content)
                    }
                    className="flex-1 px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
                  >
                    {schedulingPost ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                        Scheduling...
                      </>
                    ) : (
                      "Schedule Post"
                    )}
                  </button>
                  <button
                    onClick={() => {
                      setShowNewSchedule(false);
                      setSchedulePostData(null);
                    }}
                    className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
                  >
                    Cancel
                  </button>
                </div>
              </div>
            </div>
          )}
          {/* New Recurring Schedule Modal */}
          {showNewRecurring && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
              <div className="bg-white rounded-xl shadow-xl p-6 w-full max-w-md">
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-lg font-semibold text-gray-900">
                    Create Recurring Schedule
                  </h3>
                  <button
                    onClick={() => setShowNewRecurring(false)}
                    className="p-2 text-gray-400 hover:text-gray-600"
                  >
                    <X className="w-4 h-4" />
                  </button>
                </div>
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Schedule Name
                    </label>
                    <input
                      type="text"
                      value={newRecurringForm.name}
                      onChange={(e) =>
                        setNewRecurringForm({
                          ...newRecurringForm,
                          name: e.target.value,
                        })
                      }
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      placeholder="e.g., Weekly Insights"
                    />
                  </div>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Platform
                      </label>
                      <select
                        value={newRecurringForm.platform}
                        onChange={(e) =>
                          setNewRecurringForm({
                            ...newRecurringForm,
                            platform: e.target.value,
                          })
                        }
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      >
                        <option value="LinkedIn">LinkedIn</option>
                        <option value="Twitter">Twitter/X</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Content Type
                      </label>
                      <select
                        value={newRecurringForm.contentType}
                        onChange={(e) =>
                          setNewRecurringForm({
                            ...newRecurringForm,
                            contentType: e.target.value,
                          })
                        }
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      >
                        <option value="Thought Leadership">
                          Thought Leadership
                        </option>
                        <option value="Company Updates">Company Updates</option>
                        <option value="Industry Commentary">
                          Industry Commentary
                        </option>
                        <option value="Personal Stories">
                          Personal Stories
                        </option>
                      </select>
                    </div>
                  </div>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Day
                      </label>
                      <select
                        value={newRecurringForm.dayOfWeek}
                        onChange={(e) =>
                          setNewRecurringForm({
                            ...newRecurringForm,
                            dayOfWeek: e.target.value,
                          })
                        }
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      >
                        <option value="monday">Monday</option>
                        <option value="tuesday">Tuesday</option>
                        <option value="wednesday">Wednesday</option>
                        <option value="thursday">Thursday</option>
                        <option value="friday">Friday</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Time
                      </label>
                      <input
                        type="time"
                        value={newRecurringForm.time}
                        onChange={(e) =>
                          setNewRecurringForm({
                            ...newRecurringForm,
                            time: e.target.value,
                          })
                        }
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      />
                    </div>
                  </div>
                </div>
                <div className="flex space-x-3 mt-6">
                  <button
                    onClick={handleCreateRecurring}
                    disabled={!newRecurringForm.name}
                    className="flex-1 px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    Create Schedule
                  </button>
                  <button
                    onClick={() => setShowNewRecurring(false)}
                    className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
                  >
                    Cancel
                  </button>
                </div>
              </div>
            </div>
          )}
        </div>
      </main>
    </div>
  );
}
